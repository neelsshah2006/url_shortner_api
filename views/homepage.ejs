<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>URL Shortener API – Documentation</title>
  <link rel="stylesheet" href="/stylesheets/homepage.css" />
</head>

<body>
  <header>
    <h1>URL Shortener API</h1>
    <p>
      A robust, secure, and scalable RESTful API for shortening URLs.<br>
      <strong>Live API:</strong>
      <a href="https://url-shortner-api-k63s.onrender.com" target="_blank">
        https://url-shortner-api-k63s.onrender.com
      </a>
    </p>
    <button id="modeToggle" aria-label="Toggle dark/light mode">🌓</button>
  </header>

  <nav>
    <ul>
      <li><a href="#features">Features</a></li>
      <li><a href="#technology-stack">Technology Stack</a></li>
      <li><a href="#getting-started">Getting Started</a></li>
      <li><a href="#api-documentation">API Documentation</a></li>
      <li><a href="#authentication--authorization">Auth & Security</a></li>
      <li><a href="#folder-structure">Folder Structure</a></li>
      <li><a href="#contributing">Contributing</a></li>
      <li><a href="#license">License</a></li>
      <li><a href="#contact--credits">Contact</a></li>
    </ul>
  </nav>

  <main>
    <section id="features">
      <h2>Features</h2>
      <ul>
        <li>User Registration & Authentication (JWT, OAuth, HTTP-only cookies)</li>
        <li>Advanced Session Management (device/session limits, cleanup)</li>
        <li>Secure Password Hashing (bcrypt)</li>
        <li>OAuth2.0 Authentication (Google OAuth2.0)</li>
        <li>Token Validation (JWT)</li>
        <li>Automatic Cleanup of Expired Tokens</li>
        <li>Database Optimization (Indexed fields, efficient queries, and schema evolution support)</li>
        <li>URL Shortening (unique/custom codes)</li>
        <li>URL Safety Check before creating short URL (Google Safe Browsing API)</li>
        <li>Redirection & Analytics (visit/device/timestamp tracking)</li>
        <li>User Profile Management</li>
        <li>User-Specific Link Management</li>
        <li>Link Statistics</li>
        <li>Automatic Token Cleanup</li>
        <li>Comprehensive Error Handling</li>
        <li>CORS Protection</li>
      </ul>
    </section>

    <section id="technology-stack">
      <h2>Technology Stack</h2>
      <ul>
        <li><strong>Language:</strong> JavaScript (Node.js)</li>
        <li><strong>Framework:</strong> Express.js</li>
        <li><strong>Database:</strong> MongoDB (Mongoose ODM)</li>
        <li><strong>Authentication:</strong> JWT, bcrypt, Google OAuth</li>
        <li><strong>Templating:</strong> EJS</li>
        <li><strong>Validation:</strong> express-validator</li>
        <li><strong>Caching:</strong> lru-cache</li>
        <li><strong>Security:</strong> helmet, cookie-parser, cors</li>
        <li><strong>Analytics:</strong> ua-parser-js, request-ip</li>
        <li><strong>Other:</strong> dotenv, morgan, axios, crypto</li>
      </ul>
    </section>

    <section id="getting-started">
      <h2>Getting Started</h2>
      <h3>Prerequisites</h3>
      <ul>
        <li><a href="https://nodejs.org/" target="_blank">Node.js</a> (v18+ recommended)</li>
        <li><a href="https://www.mongodb.com/" target="_blank">MongoDB</a> (local or cloud)</li>
      </ul>
      <h3>Installation</h3>
      <pre><code> git clone https://github.com/neelsshah2006/url_shortner_api.git
  cd url_shortner_api
  npm install</code></pre>
      <h3>Environment Variables</h3>
      <pre><code> PORT=5000
  MONGO_URL="mongodb://127.0.0.1:27017/url_shortener"
  ROUNDS=15
  NODE_ENV="development"
  FRONTEND_URL="http://localhost:5173"
  BACKEND_URL="http://localhost:5000"
  MAX_DEVICES=5
  ACCESS_TOKEN_SECRET="your_access_token_secret"
  REFRESH_TOKEN_SECRET="your_refresh_token_secret"
  ACCESS_TOKEN_EXPIRY="15m"
  REFRESH_TOKEN_EXPIRY="7d"
  GOOGLE_SAFE_BROWSING_API_KEY=your_google_api_key
  GOOGLE_SAFE_BROWSING_CLIENT_ID=client_id
  GOOGLE_SAFE_BROWSING_CLIENT_VERSION=client_version
  GOOGLE_OAUTH_CLIENT_ID=your_google_oauth_client_id
  GOOGLE_OAUTH_CLIENT_SECRET=your_google_oauth_client_secret</code></pre>
      <pre>
Note:

 - <code>GOOGLE_SAFE_BROWSING_API_KEY</code> , <code>GOOGLE_SAFE_BROWSING_CLIENT_ID</code> and 
   <code>GOOGLE_SAFE_BROWSING_CLIENT_VERSION</code> are optional, if not provided, the API will not check
    if the longUrl is malicious or not and will continue to generate short URL.
 - <code>ACCESS_TOKEN_SECRET</code> and <code>REFRESH_TOKEN_SECRET</code> are required for JWT authentication.
 - <code>MAX_DEVICES</code> controls how many concurrent sessions a user can have.
 - If `FRONTEND_URL` is not set, API will accept requests from all origins.
        </pre>
      <h3>Running the Project</h3>
      <pre><code> npm start
  # or
  node server.js</code></pre>
      <p>The server will start on <code>http://localhost:5000</code> (or your specified port).</p>
    </section>

    <section id="api-documentation">
      <h2>API Documentation</h2>
      <h3>Authentication</h3>
      <div class="endpoint">
        <strong>POST</strong> <code>/auth/local/register</code> – Register a new user.
        <details>
          <summary>Request</summary>
          <pre><code> {
    "firstName": "Neel",
    "lastName": "Shah",
    "username": "neelsshah2006",
    "email": "neelsshah2006@gmail.com",
    "password": "Password@123"
  }</code></pre>
        </details>
        <details>
          <summary>Response <span style="color:green;">201 Created</span></summary>
          <pre><code> {
    "success": true,
    "message": "User Registered Successfully",
    "data": {
      "_id": "...",
      "fullName": {
        "firstName": "Neel",
        "lastName": "Shah"
      },
      "username": "neelsshah2006",
      "email": "neelsshah2006@gmail.com",
      "authProvider": "local",
      "createdAt": "...",
      "updatedAt": "..."
    },
    "statusCode": 201,
    "timestamp": "..."
  }</code></pre>
        </details>
      </div>
      <div class="endpoint">
        <strong>POST</strong> <code>/auth/local/login</code> – Login with email or username.
        <details>
          <summary>Request (email)</summary>
          <pre><code> {
    "email": "neelsshah2006@gmail.com",
    "password": "Password@123"
  }</code></pre>
          <summary>Request (username)</summary>
          <pre><code> {
    "username": "neelsshah2006",
    "password": "Password@123"
  }</code></pre>
        </details>
        <details>
          <summary>Response <span style="color:green;">200 OK</span></summary>
          <pre><code> {
    "success": true,
    "message": "User Login Successful",
    "data": {
      "_id": "...",
      "fullName": {
        "firstName": "Neel",
        "lastName": "Shah"
      },
      "username": "neelsshah2006",
      "email": "neelsshah2006@gmail.com",
      "authProvider": "local",
      "createdAt": "...",
      "updatedAt": "..."
    },
    "statusCode": 200,
    "timestamp": "..."
  }</code></pre>
        </details>
      </div>
      <div class="endpoint">
        <strong>GET</strong> <code>/auth/oauth/google</code> - Redirects to Google for authentication
      </div>
      <div class="endpoint">
        <strong>GET</strong> <code>/auth/oauth/google/callback</code> - Handles Google Callback
      </div>
      <div class="endpoint">
        <strong>GET</strong> <code>/auth/logout</code> – Logout (cookie-based).
        <details>
          <summary>Response <span style="color:green;">200 OK</span></summary>
          <pre><code> {
    "success": true,
    "message": "Logged Out Successfully",
    "data": "Logged Out",
    "statusCode": 200,
    "timestamp": "..."
  }</code></pre>
        </details>
      </div>
      <h3>User Endpoints</h3>
      <div class="endpoint">
        <strong>GET</strong> <code>/user/profile</code> – Get current user's profile.
        <details>
          <summary>Response <span style="color:green;">200 OK</span></summary>
          <pre><code>{
    "success": true,
    "message": "Profile Sent Successfully",
    "data": {
      "user": {
        "_id": "...",
        "fullName": {
          "firstName": "Neel",
          "lastName": "Shah"
        },
        "username": "neelsshah2006",
        "email": "neelsshah2006@gmail.com",
        authProvider": "local",
        "createdAt": "...",
        "updatedAt": "..."
      }
    },
    "statusCode": 200,
    "timestamp": "..."
  }</code></pre>
        </details>
      </div>
      <div class="endpoint">
        <strong>PATCH</strong> <code>/user/update-profile</code> – Update profile.
        <details>
          <summary>Request</summary>
          <pre><code> {
    "firstName": "Moksh",
    "lastName": "Shah",
    "username": "mokshshah"
  }</code></pre>
        </details>
        <details>
          <summary>Response <span style="color:green;">200 OK</span></summary>
          <pre><code> {
    "success": true,
    "message": "Profile Updated Successfully",
    "data": {
      "user": {
        "_id": "...",
        "fullName": {
          "firstName": "Moksh",
          "lastName": "Shah"
        },
        "username": "mokshshah",
        "email": "neelsshah2006@gmail.com",
        authProvider": "local",
        "createdAt": "...",
        "updatedAt": "..."
      }
    },
    "statusCode": 200,
    "timestamp": "..."
  }</code></pre>
        </details>
      </div>
      <div class="endpoint">
        <strong>PATCH</strong> <code>/user/change-password</code> – Change password.
        <details>
          <summary>Request</summary>
          <pre><code> {
    "oldPassword": "Password@123",
    "newPassword": "NewPass@456"
  }</code></pre>
        </details>
        <details>
          <summary>Response <span style="color:green;">200 OK</span></summary>
          <pre><code> {
    "success": true,
    "message": "Password Changed Successfully",
    "data": {
      "user": {
        "_id": "...",
        "fullName": {
          "firstName": "Moksh",
          "lastName": "Shah"
        },
        "username": "mokshshah",
        "email": "neelsshah2006@gmail.com",
        "authProvider": "local",
        "createdAt": "...",
        "updatedAt": "..."
      }
    },
    "statusCode": 200,
    "timestamp": "..."
  }</code></pre>
        </details>
      </div>
      <div class="endpoint">
        <strong>GET</strong> <code>/user/get-links</code> – List user's links.
        <details>
          <summary>Response <span style="color:green;">200 OK</span></summary>
          <pre><code> {
    "success": true,
    "message": "Links Sent Successfully",
    "data": {
      "links": [
        {
          "_id": "...",
          "longUrl": "https://example.com",
          "shortCode": "xxxxxx",
          "visitCount": 1,
          "createdAt": "..."
        }
      ]
    },
    "statusCode": 200,
    "timestamp": "..."
  }</code></pre>
        </details>
      </div>
      <h3>URL Management</h3>
      <div class="endpoint">
        <strong>POST</strong> <code>/url/shorten</code> – Shorten a URL.
        <details>
          <summary>Request</summary>
          <pre><code> {
    "longUrl": "https://example.com"
  }</code></pre>
        </details>
        <details>
          <summary>Response <span style="color:green;">201 Created</span></summary>
          <pre><code> {
    "success": true,
    "message": "URL Shortened Successfully",
    "data": {
      "shortUrl": {
        "_id": "...",
        "user": "...",
        "longUrl": "https://example.com",
        "shortCode": "xxxxxx",
        "visitCount": 0,
        "createdAt": "...",
        "updatedAt": "..."
      }
    },
    "statusCode": 201,
    "timestamp": "..."
  }</code></pre>
        </details>
      </div>
      <div class="endpoint">
        <strong>PATCH</strong> <code>/url/custom-url</code> – Set a custom short code.
        <details>
          <summary>Request</summary>
          <pre><code> {
    "existingCode": "xxxxxx",
    "customCode": "google"
  }</code></pre>
        </details>
        <details>
          <summary>Response <span style="color:green;">200 OK</span></summary>
          <pre><code> {
    "success": true,
    "message": "Custom Code attached successfully",
    "data": {
      "shortUrl": {
        "_id": "...",
        "user": "...",
        "longUrl": "https://example.com",
        "shortCode": "example",
        "visitCount": 0,
        "createdAt": "...",
        "updatedAt": "..."
      }
    },
    "statusCode": 200,
    "timestamp": "..."
  }</code></pre>
        </details>
      </div>
      <div class="endpoint">
        <strong>GET</strong> <code>/url/stats?shortCode=xxxxxx</code> – Get URL stats.
        <details>
          <summary>Response <span style="color:green;">200 OK</span></summary>
          <pre><code>{
    "success": true,
    "message": "URL Stats sent Successfully",
    "data": {
      "shortUrl": {
        "_id": "...",
        "user": "...",
        "longUrl": "https://example.com",
        "shortCode": "example",
        "visitCount": 3,
        "createdAt": "2025-06-22T15:29:20.419Z",
        "updatedAt": "2025-06-22T15:31:46.073Z",
        "__v": 0
      },
      "clicks": [
        {
          "_id": "...",
          "url": "...",
          "continent": "Asia",
          "country": "India",
          "state": "Maharashtra",
          "city": "Mumbai",
          "location": {
            "ltd": 18.95,
            "lng": 72.83
          },
          "browser": "Chrome",
          "os": "Windows",
          "device": "desktop",
          "createdAt": "2025-06-22T15:31:36.527Z",
          "updatedAt": "2025-06-22T15:31:36.527Z",
          "__v": 0
        },
        {
          "_id": "...",
          "url": "...",
          "continent": "Asia",
          "country": "India",
          "state": "Gujarat",
          "city": "Surat",
          "location": {
            "ltd": 21.17,
            "lng": 72.83
          },
          "browser": "Edge",
          "os": "Android",
          "device": "mobile",
          "createdAt": "...",
          "updatedAt": "...",
          "__v": 0
        },
        {
          "_id": "...",
          "url": "...",
          "continent": "Asia",
          "country": "India",
          "state": "Gujarat",
          "city": "Ahmedabad",
          "location": {
            "ltd": 23.0,
            "lng": 72.57
          },
          "browser": "Safari",
          "os": "ios",
          "device": "iPad",
          "createdAt": "...",
          "updatedAt": "..."
        }
      ]
    },
    "statusCode": 200,
    "timestamp": "..."
  }</code></pre>
        </details>
      </div>
      <div class="endpoint">
        <strong>DELETE</strong> <code>/url/delete?shortCode=xxxxxx</code> – Delete a URL.
        <details>
          <summary>Response <span style="color:green;">200 OK</span></summary>
          <pre><code> {
    "success": true,
    "message": "URL Deleted Successfully",
    "data": {
      "deletedUrl": {
        "_id": "...",
        "user": "...",
        "longUrl": "https://example.com",
        "shortCode": "xxxxxx",
        "visitCount": 3,
        "createdAt": "...",
        "updatedAt": "..."
      }
    },
    "statusCode": 200,
    "timestamp": "..."
  }</code></pre>
        </details>
      </div>
      <h3>Redirection</h3>
      <div class="endpoint">
        <strong>GET</strong> <code>/:shortCode</code> – Redirect to the original URL.
        <details>
          <summary>Response</summary>
          <pre><code>Redirects to the original URL if found, otherwise shows a not found page.</code></pre>
        </details>
      </div>
      <h3>Error Response Format</h3>
      <pre><code> {
    "success": false,
    "message": "Error message",
    "errorCode": "BAD_REQUEST",
    "statusCode": 400,
    "timestamp": "2025-06-21T12:00:00.000Z"
  }</code></pre>
    </section>

    <section id="authentication--authorization">
      <h2>Authentication & Authorization</h2>
      <ul>
        <li>Dual Token System: Short-lived access tokens and long-lived refresh tokens (HTTP-only cookies)</li>
        <li>Token Expiry: Access tokens expire after <code>ACCESS_TOKEN_EXPIRY</code>, refresh tokens after
          <code>REFRESH_TOKEN_EXPIRY</code> days
        </li>
        <li>Session/Device Limit: Configurable via <code>MAX_DEVICES</code> (default: 5)</li>
        <li>Logout: Logs out user and removes refresh token from active sessions</li>
        <li>OAuth2.0: Google OAuth2.0 for easy sign-in</li>
        <li>Passwordless Login: Users can login with just their email (if they have a Google account associated with it)
        </li>
        <li>Automatic Token Cleanup: Expired tokens are removed automatically</li>
        <li>Password Security: Bcrypt hashing with configurable salt rounds</li>
        <li>CORS: If <code>FRONTEND_URL</code> is set, only requests from that origin are allowed</li>
      </ul>
    </section>

    <section id="folder-structure">
      <h2>Folder Structure</h2>
      <pre><code>url_shortner_api/
├── server.js
├── app.js
├── .env
├── package.json
├── config/
│   ├── mongodb.config.js
│   └── passport.config.js
├── controllers/
│   ├── url.controller.js
│   ├── user.controller.js
│   ├── localAuth.controller.js
│   ├── oAuth.controller.js
│   ├── auth.controller.js
│   └── redirect.controller.js
├── middleware/
│   ├── auth.middleware.js
│   └── errorHandler.middleware.js
├── models/
│   ├── url.model.js
│   ├── user.model.js
│   └── click.model.js
├── routes/
│   ├── redirect.routes.js
│   ├── url.routes.js
│   ├── user.routes.js
│   ├── auth.routes.js
│   ├── localAuth.routes.js
│   └── oAuth.routes.js
├── services/
│   ├── localAuth.service.js
│   ├── auth.service.js
│   ├── url.service.js
│   ├── user.service.js
│   └── redirect.service.js
├── public/
│   ├── images/
│   ├── javascripts/
│   └── stylesheets/
├── views/
│   ├── homepage.ejs
│   └── notfound.ejs
├── utils/
│   ├── appError.util.js
│   ├── catchAsync.util.js
│   ├── response.util.js
│   ├── crypto.util.js
│   ├── refreshTokenValidator.util.js
│   ├── setCookie.util.js
│   ├── browserReqChecker.util.js
│   ├── checkUrlSafety.util.js
│   └── UAParser.util.js
└── ...
</code></pre>
    </section>

    <section id="contributing">
      <h2>Contributing</h2>
      <ol>
        <li>Fork the repository</li>
        <li>Create your branch (<code>git checkout -b branchName</code>)</li>
        <li>Commit your changes (<code>git commit -m 'Add new feature'</code>)</li>
        <li>Push to the branch (<code>git push origin branchName</code>)</li>
        <li>Open a Pull Request</li>
      </ol>
    </section>

    <section id="license">
      <h2>License</h2>
      <p>This project is licensed under the <a href="https://www.github.com/neelsshah2006/url_shortner_api"
          target="_blank">MIT License</a>.</p>
    </section>

    <section id="contact--credits">
      <h2>Contact / Credits</h2>
      <ul>
        <li><strong>Author:</strong> <a href="mailto:neelsshah2006@gmail.com">Neel Shah</a></li>
        <li><strong>GitHub:</strong> <a href="https://github.com/neelsshah2006" target="_blank">neelsshah2006</a></li>
        <li><strong>LinkedIn:</strong> <a href="https://linkedin.com/in/neelsshah2006"
            target="_blank">linkedin.com/in/neelsshah2006</a></li>
      </ul>
    </section>
  </main>

  <footer>
    <hr>
    <p>Made with ❤️ by Neel Shah</p>
    <section>
      <div>
        <p>Connect with me</p>
        <div class="contact">
          <button><a href="mailto:neelsshah2006@gmail.com" target="_blank"><img width="35" src="/images/mail.svg"
                alt="gmail"></a></button>
          <button><a href="https://linkedin.com/in/neelsshah2006" target="_blank"><img width="30"
                src="/images/linkedin.svg" alt="linkedin"></a></button>
          <button><a href="https://github.com/neelsshah2006" target="_blank"><img width="30" src="/images/github.svg"
                alt="github"></a></button>
        </div>
      </div>
    </section>
  </footer>
  <script src="/javascripts/homepage.js"></script>
</body>

</html>