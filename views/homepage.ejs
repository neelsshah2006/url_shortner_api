<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>URL Shortener API Docs</title>
  <link rel="shortcut icon" href="/images/favicon.png" type="image/x-icon">
  <link rel="stylesheet" href="/stylesheets/homepage.css">
</head>

<body>
  <div class="header-content">
    <h1>üìò URL Shortener API</h1>
    <div class="buttons">
      <button><a href="https://github.com/neelsshah2006/url_shortner_api" target="_blank"><img width="30"
            src="/images/github.svg" alt="github"></a></button>
      <button><a href="https://linkedin.com/in/neelsshah2006" target="_blank"><img width="30" src="/images/linkedin.svg"
            alt="linkedin"></a></button>
      <button id="modeToggle">üåô</button>
    </div>
  </div>
  <p>A minimal and efficient RESTful API for shortening URLs with <strong>advanced session management</strong> and
    <strong>high-performance authentication</strong>. This backend service allows users to register,
    authenticate, create, manage, and track shortened links with enterprise-grade security.
    Built with Node.js, Express, and MongoDB.
  </p>
  <div>API is currently openly availabe. Each of the following API Endpoint is currently live on
    the domain: <a href="https://url-shortner-api-k63s.onrender.com/">https://url-shortner-api-k63s.onrender.com</a>
  </div>

  <section>
    <h2>üöÄ Features</h2>
    <ul>
      <li>User registration and authentication (JWT & cookies)</li>
      <li><strong>üîí Advanced Session Management:</strong> Configurable device limit with automatic cleanup</li>
      <li>Secure password hashing with bcrypt</li>
      <li>URL shortening with unique short codes</li>
      <li>Creation and Editing of Custom URLs</li>
      <li>Redirection to original URLs with visit tracking</li>
      <li>URL statistics (visit count, creation date)</li>
      <li>User profile management</li>
      <li>User-specific link management</li>
      <li><strong>üöÄ Automatic Token Cleanup:</strong> Expired tokens removed automatically</li>
      <li><strong>üõ°Ô∏è Backward Compatible:</strong> Seamless migration from old token formats</li>
      <li>Clean API documentation and comprehensive error handling</li>
    </ul>
  </section>

  <section>
    <h2>üß∞ Technology Stack</h2>
    <ul>
      <li><strong>Language:</strong> JavaScript (Node.js)</li>
      <li><strong>Framework:</strong> Express.js</li>
      <li><strong>Database:</strong> MongoDB (Mongoose ODM)</li>
      <li><strong>Authentication:</strong> JWT, bcrypt</li>
      <li><strong>Templating:</strong> EJS</li>
      <li><strong>Validation:</strong> express-validator</li>
      <li><strong>Other:</strong> dotenv, cookie-parser, morgan, cors, helmet</li>
    </ul>
  </section>

  <section>
    <h2>üì¶ Installation</h2>
    <pre class="code-block"><code>git clone https://github.com/neelsshah2006/url_shortner_api.git
cd url_shortner_api
npm install</code></pre>
  </section>

  <section>
    <h2>üîê Environment Variables</h2>
    <pre class="code-block"><code>PORT=5000
MONGO_URL=mongodb://127.0.0.1:27017/url_shortner
ACCESS_TOKEN_SECRET=your_access_token_secret
REFRESH_TOKEN_SECRET=your_refresh_token_secret
ACCESS_TOKEN_EXPIRY=15m
REFRESH_TOKEN_EXPIRY=7d
NODE_ENV=development
ROUNDS=15
MAX_DEVICES=5
FRONTEND_URL=your_frontend_website_url
</code></pre>
    <div class="important-notes">
      <h3>üìã Important Notes:</h3>
      <ul>
        <li><code>ACCESS_TOKEN_SECRET</code> and <code>REFRESH_TOKEN_SECRET</code> are <strong>required</strong> for JWT
          authentication</li>
        <li><code>MAX_DEVICES</code> controls how many concurrent sessions a user can have (default: 5)</li>
        <li><code>FRONTEND_URL</code> is optional - if not provided, API will accept requests from all websites</li>
        <li>When a user exceeds the device limit, the oldest session is automatically removed</li>
      </ul>
    </div>
  </section>

  <section>
    <h2>üö¶ Authentication</h2>

    <div class="endpoint">
      <div class="endpointTitle">Register a new user</div>
      <span class="method">POST</span> <code>/auth/register</code><br>
      <strong>Request Body:</strong>
      <pre class="code-block"><code>{
  "firstName": "Neel",
  "lastName": "Shah",
  "username": "neelsshah2006",
  "email": "neelsshah2006@gmail.com",
  "password": "Password@123"
}</code></pre>
      <strong>Response:</strong>
      <pre class="code-block"><code>{
  "success": true,
  "message": "User Registered Successfully",
  "data": {
    "token": "...JWT_Token...",
    "user": {
      "fullName": {
        "firstName": "Neel",
        "lastName": "Shah",
        "_id": "..."
      },
      "username": "neelsshah2006",
      "email": "neelsshah2006@gmail.com",
      "_id": "...",
      "createdAt": "...",
      "updatedAt": "...",
      "__v": 0
    }
  },
  "statusCode": 201,
  "timestamp": "..."
}</code></pre>
    </div>

    <div class="endpoint">
      <div class="endpointTitle">Login with email or username</div>
      <span class="method">POST</span> <code>/auth/login</code><br>
      <strong>Request Body:</strong>
      <pre class="code-block"><code>{
  "email": "neelsshah2006@gmail.com",
  "password": "Password@123"
}</code></pre>
      <p>OR</p>
      <pre class="code-block"><code>{
  "username": "neelsshah2006",
  "password": "Password@123"
}</code></pre>
      <strong>Response:</strong>
      <pre class="code-block"><code>{
  "success": true,
  "message": "User Login Successful",
  "data": {
    "token": "...JWT_Token...",
    "user": {
      "_id": "...",
      "fullName": {
        "firstName": "Neel",
        "lastName": "Shah",
        "_id": "..."
      },
      "username": "neelsshah2006",
      "email": "neelsshah2006@gmail.com",
      "createdAt": "...",
      "updatedAt": "...",
      "__v": 0
    }
  },
  "statusCode": 200,
  "timestamp": "..."
}</code></pre>
    </div>

    <div class="endpoint">
      <div class="endpointTitle">Logout user</div>
      <span class="method">GET</span> <code>/auth/logout</code><br>
      <span class="headers">Headers:</span> <code>Authorization: "Bearer <%= "<token>" %>"</code><br>
      <p><strong>Description:</strong> Logs out user and removes refresh token from active sessions.</p>
      <strong>Response:</strong>
      <pre class="code-block"><code>{
  "success": true,
  "message": "Logged Out Successfully",
  "data": "Logged Out",
  "statusCode": 200,
  "timestamp": "..."
}</code></pre>
    </div>
  </section>

  <section>
    <h2>üë§ User Endpoints</h2>

    <div class="endpoint">
      <div class="endpointTitle">Get User Profile</div>
      <span class="method">GET</span> <code>/user/profile</code><br>
      <span class="headers">Headers:</span> <code>Authorization: "Bearer <%= "<token>" %>"</code><br>
      <strong>Response:</strong>
      <pre class="code-block"><code>{
  "success": true,
  "message": "Profile Sent Successfully",
  "data": {
    "user": {
      "_id": "...",
      "fullName": {
        "firstName": "Neel",
        "lastName": "Shah",
        "_id": "..."
      },
      "username": "neelsshah2006",
      "email": "neelsshah2006@gmail.com",
      "createdAt": "...",
      "updatedAt": "...",
      "__v": 0
    }
  },
  "statusCode": 200,
  "timestamp": "..."
}</code></pre>
    </div>

    <div class="endpoint">
      <div class="endpointTitle">Update User Profile</div>
      <span class="method">PATCH</span> <code>/user/update-profile</code><br>
      <span class="headers">Headers:</span> <code>Authorization: "Bearer <%= "<token>" %>"</code><br>
      <strong>Request Body:</strong>
      <pre class="code-block"><code>{
  "firstName": "Moksh",
  "lastName": "Shah",
  "username": "mokshshah"
}</code></pre>
      <strong>Response:</strong>
      <pre class="code-block"><code>{
  "success": true,
  "message": "Profile Updated Successfully",
  "data": {
    "user": {
      "_id": "...",
      "fullName": {
        "firstName": "Moksh",
        "lastName": "Shah",
        "_id": "..."
      },
      "username": "mokshshah",
      "email": "neelsshah2006@gmail.com",
      "createdAt": "...",
      "updatedAt": "...",
      "__v": 0
    }
  },
  "statusCode": 200,
  "timestamp": "..."
}</code></pre>
    </div>

    <div class="endpoint">
      <div class="endpointTitle">Change Account Password</div>
      <span class="method">PATCH</span> <code>/user/change-password</code><br>
      <span class="headers">Headers:</span> <code>Authorization: "Bearer <%= "<token>" %>"</code><br>
      <strong>Request Body:</strong>
      <pre class="code-block"><code>{
  "oldPassword": "Password@123",
  "newPassword": "NewPass@456"
}</code></pre>
      <strong>Response:</strong>
      <pre class="code-block"><code>{
  "success": true,
  "message": "Password Changed Successfully",
  "data": {
    "user": {
      "_id": "...",
      "fullName": {
        "firstName": "Moksh",
        "lastName": "Shah",
        "_id": "..."
      },
      "username": "mokshshah",
      "email": "neelsshah2006@gmail.com",
      "createdAt": "...",
      "updatedAt": "...",
      "__v": 0
    }
  },
  "statusCode": 200,
  "timestamp": "..."
}</code></pre>
    </div>

    <div class="endpoint">
      <div class="endpointTitle">Get all Links created by the loginned User</div>
      <span class="method">GET</span> <code>/user/get-links</code><br>
      <span class="headers">Headers:</span> <code>Authorization: "Bearer <%= "<token>" %>"</code><br>
      <strong>Response:</strong>
      <pre class="code-block"><code>{
  "success": true,
  "message": "Links Sent Successfully",
  "data": {
    "links": [
      {
        "_id": "...",
        "longUrl": "https://www.google.com",
        "shortCode": "xxxxxx",
        "visitCount": 7,
        "createdAt": "..."
      },
      {
        "_id": "...",
        "longUrl": "https://example.com",
        "shortCode": "xxxxxx",
        "visitCount": 2,
        "createdAt": "..."
      }
    ]
  },
  "statusCode": 200,
  "timestamp": "2025-06-16T12:35:10.937Z"
}</code></pre>
    </div>
  </section>

  <section>
    <h2>üîó URL Management</h2>

    <div class="endpoint">
      <div class="endpointTitle">Shorten Link</div>
      <span class="method">POST</span> <code>/url/shorten</code><br>
      <span class="headers">Headers:</span> <code>Authorization: "Bearer <%= "<token>" %>"</code><br>
      <strong>Request Body:</strong>
      <pre class="code-block"><code>{
  "longUrl": "https://example.com"
}</code></pre>
      <strong>Response:</strong>
      <pre class="code-block"><code>{
  "success": true,
  "message": "URL Shortened Successfully",
  "data": {
    "shortUrl": {
      "user": "...",
      "longUrl": "https://example.com",
      "shortCode": "xxxxxx",
      "visitCount": 0,
      "_id": "...",
      "createdAt": "...",
      "updatedAt": "...",
      "__v": 0
    }
  },
  "statusCode": 201,
  "timestamp": "..."
}</code></pre>
    </div>

    <div class="endpoint">
      <div class="endpointTitle">Change Shortened URL to a custom URL or Update a custom URL</div>
      <span class="method">PATCH</span> <code>/url/custom-url</code><br>
      <span class="headers">Headers:</span> <code>Authorization: "Bearer <%= "<token>" %>"</code><br>
      <strong>Request Body:</strong>
      <pre class="code-block"><code>{
  "existingCode": "abc78s",
  "customCode": "example"
}</code></pre>
      <strong>Response:</strong>
      <pre class="code-block"><code>{
  "success": true,
  "message": "URL Shortened Successfully",
  "data": {
    "shortUrl": {
      "user": "...User_ID...",
      "longUrl": "https://example.com",
      "shortCode": "example",
      "visitCount": 0,
      "_id": "...",
      "createdAt": "...",
      "updatedAt": "...",
      "__v": 0
    }
  },
  "statusCode": 201,
  "timestamp": "..."
}</code></pre>
    </div>

    <div class="endpoint">
      <div class="endpointTitle">Get all Stats Related to a given URL</div>
      <span class="method">GET</span> <code>/url/stats</code><br>
      <span class="headers">Headers:</span> <code>Authorization: "Bearer <%= "<token>" %>"</code><br>
      <span class="headers">Params:</span> <code>shortCode=xxxxxx</code><br>
      <strong>Response:</strong>
      <pre class="code-block"><code>{
  "success": true,
  "message": "URL Stats sent Successfully",
  "data": {
    "shortUrl": {
      "_id": "...",
      "user": "...",
      "longUrl": "https://example.com",
      "shortCode": "xxxxxx",
      "visitCount": 10,
      "createdAt": "...",
      "updatedAt": "...",
      "__v": 0
    }
  },
  "statusCode": 200,
  "timestamp": "..."
}</code></pre>
    </div>

    <div class="endpoint">
      <div class="endpointTitle">Delete a Shortened URL</div>
      <span class="method">DELETE</span> <code>/url/delete</code><br>
      <span class="headers">Headers:</span> <code>Authorization: "Bearer <%= "<token>" %>"</code><br>
      <span class="headers">Params:</span> <code>shortCode=xxxxxx</code><br>
      <strong>Response:</strong>
      <pre class="code-block"><code>{
  "success": true,
  "message": "URL Deleted Successfully",
  "data": {
    "deletedUrl": {
      "_id": "...",
      "user": "...",
      "longUrl": "https://example.com",
      "shortCode": "xxxxxx",
      "visitCount": 10,
      "createdAt": "...",
      "updatedAt": "...",
      "__v": 0
    }
  },
  "statusCode": 200,
  "timestamp": "..."
}</code></pre>
    </div>
  </section>

  <section>
    <h2>üöÄ Performance & Session Management</h2>

    <div class="performance-section">
      <h3>‚ö° High-Performance Authentication</h3>
      <ul>
        <li><strong>Token Validation:</strong> Uses <code>jwt.decode()</code> for faster parsing vs
          <code>jwt.verify()</code>
        </li>
        <li><strong>Bulk Database Operations:</strong> Efficient cleanup with <code>bulkWrite()</code> operations</li>
        <li><strong>Automatic Cleanup:</strong> Expired tokens removed without manual intervention</li>
      </ul>
    </div>

    <div class="session-section">
      <h3>üîí Advanced Session Management</h3>
      <ul>
        <li><strong>Dual Token System:</strong> Access tokens (short-lived) + Refresh tokens (long-lived)</li>
        <li><strong>Device Limit Control:</strong> Configurable maximum concurrent sessions per user (default: 5)</li>
        <li><strong>Automatic Session Cleanup:</strong> Expired tokens removed automatically for optimal performance
        </li>
        <li><strong>Multi-Device Support:</strong> Users can be logged in on up to <code>MAX_DEVICES</code> devices
          simultaneously</li>
        <li><strong>Session Termination:</strong> When limit exceeded, oldest session automatically terminated</li>
        <li><strong>Backward Compatible:</strong> Seamless migration from old token formats</li>
      </ul>
    </div>

    <div class="security-section">
      <h3>üõ°Ô∏è Security Features</h3>
      <ul>
        <li><strong>Password Security:</strong> Bcrypt hashing with configurable salt rounds</li>
        <li><strong>Token Validation:</strong> Cryptographic verification for authentication</li>
        <li><strong>Session Tracking:</strong> Each session tracked with creation timestamps</li>
        <li><strong>Secure Storage:</strong> HTTP-only cookies with proper security headers</li>
        <li><strong>CORS Protection:</strong> Configurable cross-origin resource sharing</li>
      </ul>
    </div>
  </section>

  <section>
    <h2>‚ö†Ô∏è Error Response Format</h2>
    <pre class="code-block"><code>{
  "success": false,
  "message": "...message...",
  "errorCode": "...code[statusCode]...",
  "statusCode": "...statusCode...",
  "timestamp": "...",
  "stack": "...Error Stack..."
}</code></pre>
    <h3>Stack will only be seen while on development mode (NODE_ENV=development)</h3>
  </section>

  <section>
    <h2>üìÅ Folder Structure</h2>
    <pre class="code-block"><code>
url_shortner_api/
‚îÇ
‚îú‚îÄ‚îÄ server.js
‚îú‚îÄ‚îÄ app.js
‚îú‚îÄ‚îÄ .env
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ db/
‚îÇ ‚îî‚îÄ‚îÄ mongodb.config.js
‚îú‚îÄ‚îÄ controllers/
‚îÇ ‚îú‚îÄ‚îÄ url.controller.js
‚îÇ ‚îú‚îÄ‚îÄ user.controller.js
‚îÇ ‚îú‚îÄ‚îÄ auth.controller.js
‚îÇ ‚îî‚îÄ‚îÄ redirect.controller.js
‚îú‚îÄ‚îÄ middleware/
‚îÇ ‚îú‚îÄ‚îÄ auth.middleware.js
‚îÇ ‚îî‚îÄ‚îÄ errorHandler.middleware.js
‚îú‚îÄ‚îÄ models/
‚îÇ ‚îú‚îÄ‚îÄ url.model.js
‚îÇ ‚îî‚îÄ‚îÄ user.model.js
‚îú‚îÄ‚îÄ routes/
‚îÇ ‚îú‚îÄ‚îÄ redirect.routes.js
‚îÇ ‚îú‚îÄ‚îÄ url.routes.js
‚îÇ ‚îú‚îÄ‚îÄ user.routes.js
‚îÇ ‚îî‚îÄ‚îÄ auth.routes.js
‚îú‚îÄ‚îÄ services/
‚îÇ ‚îú‚îÄ‚îÄ auth.service.js
‚îÇ ‚îú‚îÄ‚îÄ url.service.js
‚îÇ ‚îî‚îÄ‚îÄ user.service.js
‚îú‚îÄ‚îÄ public/
‚îÇ ‚îú‚îÄ‚îÄ images/
| ‚îÇ ‚îú‚îÄ‚îÄ favicon.png
| ‚îÇ ‚îú‚îÄ‚îÄ github.svg
| ‚îÇ ‚îú‚îÄ‚îÄ linkedin.svg
| ‚îÇ ‚îî‚îÄ‚îÄ mail.svg
‚îÇ ‚îú‚îÄ‚îÄ javascripts/
| ‚îÇ ‚îî‚îÄ‚îÄ homepage.js
‚îÇ ‚îî‚îÄ‚îÄ stylesheets/
|   ‚îú‚îÄ‚îÄ homepage.css
|   ‚îî‚îÄ‚îÄ notfound.css
‚îú‚îÄ‚îÄ views/
‚îÇ ‚îú‚îÄ‚îÄ homepage.ejs
‚îÇ ‚îî‚îÄ‚îÄ notfound.ejs
‚îú‚îÄ‚îÄ utils/
‚îÇ ‚îú‚îÄ‚îÄ appError.util.js
‚îÇ ‚îú‚îÄ‚îÄ catchAsync.util.js
‚îÇ ‚îú‚îÄ‚îÄ response.util.js
‚îÇ ‚îú‚îÄ‚îÄ nanoid6.util.js
‚îÇ ‚îú‚îÄ‚îÄ refreshTokenValidator.util.js
‚îÇ ‚îî‚îÄ‚îÄ setCookie.util.js
‚îî‚îÄ‚îÄ ...
    </code></pre>
  </section>

  <footer>
    <hr>
    <p>Made with ‚ù§Ô∏è by Neel Shah</p>
    <section>
      <div>
        <p>Connect with me</p>
        <div class="contact">
          <button><a href="mailto:neelsshah2006@gmail.com" target="_blank"><img width="35" src="/images/mail.svg"
                alt="gmail"></a></button>
          <button><a href="https://linkedin.com/in/neelsshah2006" target="_blank"><img width="30"
                src="/images/linkedin.svg" alt="linkedin"></a></button>
        </div>
      </div>
    </section>
  </footer>

  <script src="/javascripts/homepage.js"></script>
</body>

</html>